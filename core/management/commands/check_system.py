from django.db import connection
from django.conf import settings
from django.core.cache import cache
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã ==="))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.check_database()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        self.check_cache()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.check_static_files()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        self.check_media_files()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
        self.check_logs()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.check_security()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        self.check_email()

        self.stdout.write(self.style.SUCCESS("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="))

    def check_database(self):
        self.stdout.write("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
                if result:
                    self.stdout.write(self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"))

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
                    from core.models import CompanyInfo, Product, Category

                    company_count = CompanyInfo.objects.count()
                    product_count = Product.objects.count()
                    category_count = Category.objects.count()

                    self.stdout.write(f"   –ö–æ–º–ø–∞–Ω–∏–π: {company_count}")
                    self.stdout.write(f"   –¢–æ–≤–∞—Ä–æ–≤: {product_count}")
                    self.stdout.write(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {category_count}")

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}"))

    def check_cache(self):
        self.stdout.write("\nüóÇÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...")
        try:
            test_key = "system_check_test"
            test_value = "test_value"

            cache.set(test_key, test_value, 60)
            cached_value = cache.get(test_key)

            if cached_value == test_value:
                self.stdout.write(self.style.SUCCESS("‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç"))
                cache.delete(test_key)
            else:
                self.stdout.write(self.style.ERROR("‚ùå –ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∞: {e}"))

    def check_static_files(self):
        self.stdout.write("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")

        static_root = getattr(settings, "STATIC_ROOT", None)

        if static_root and static_root.exists():
            file_count = len(list(static_root.rglob("*")))
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {file_count} —Ñ–∞–π–ª–æ–≤")
            )
            self.stdout.write(f"   –ü—É—Ç—å: {static_root}")
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã"))

    def check_media_files(self):
        self.stdout.write("\nüñºÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")

        media_root = getattr(settings, "MEDIA_ROOT", None)

        if media_root and media_root.exists():
            file_count = len(list(media_root.rglob("*")))
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã: {file_count} —Ñ–∞–π–ª–æ–≤")
            )
            self.stdout.write(f"   –ü—É—Ç—å: {media_root}")
        else:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            )

    def check_logs(self):
        self.stdout.write("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")

        log_dir = getattr(settings, "LOG_DIR", settings.BASE_DIR / "logs")

        if log_dir.exists():
            log_files = list(log_dir.glob("*.log*"))
            if log_files:
                total_size = sum(f.stat().st_size for f in log_files)
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª—ã: {len(log_files)} —Ñ–∞–π–ª–æ–≤")
                )
                self.stdout.write(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_bytes(total_size)}")
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
        else:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {log_dir}")
            )

    def check_security(self):
        self.stdout.write("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DEBUG
        if settings.DEBUG:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  DEBUG=True (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)")
            )
        else:
            self.stdout.write(self.style.SUCCESS("‚úÖ DEBUG=False"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SECRET_KEY
        if hasattr(settings, "SECRET_KEY") and settings.SECRET_KEY:
            if len(settings.SECRET_KEY) >= 50:
                self.stdout.write(self.style.SUCCESS("‚úÖ SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è  SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"))
        else:
            self.stdout.write(self.style.ERROR("‚ùå SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        if not settings.DEBUG:
            https_settings = [
                "SECURE_SSL_REDIRECT",
                "SESSION_COOKIE_SECURE",
                "CSRF_COOKIE_SECURE",
                "SECURE_HSTS_SECONDS",
            ]

            for setting_name in https_settings:
                if hasattr(settings, setting_name) and getattr(settings, setting_name):
                    self.stdout.write(self.style.SUCCESS(f"‚úÖ {setting_name} –≤–∫–ª—é—á–µ–Ω"))
                else:
                    self.stdout.write(
                        self.style.WARNING(f"‚ö†Ô∏è  {setting_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    )

    def check_email(self):
        self.stdout.write("\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        email_settings = ["EMAIL_HOST", "EMAIL_HOST_USER", "DEFAULT_FROM_EMAIL"]

        for setting_name in email_settings:
            if hasattr(settings, setting_name) and getattr(settings, setting_name):
                self.stdout.write(self.style.SUCCESS(f"‚úÖ {setting_name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω"))
            else:
                self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  {setting_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"))

    def format_bytes(self, bytes_size):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ["B", "KB", "MB", "GB"]:
            if bytes_size < 1024.0:
                return f"{bytes_size:.1f} {unit}"
            bytes_size /= 1024.0
        return f"{bytes_size:.1f} TB"

